// Fylgja (getfylgja.com)
// Licensed under MIT Open Source

@import "helper";

$config-utilkit: () !default;
$config-util-breakpoints: $breakpoints !default;

/// Helper mixin,
/// So we don't have to repeat the if checking for the mq version.
/// @require {Mixin} build-util-item - from helper
/// @require {Mixin} build-util-mq-item - from mq-helper
/// @param {Map} $utilities - map to loop trough for util styles
/// @return {*} - new util classes
@mixin build-util-helper($utilities, $build-mq: false) {
    @each $name, $util in $utilities {
        $type: type-of($util); // check what kind of config this is
        $property: $name; // use the key(name) as property
        $options: "auto"; // set default option value
        $properties: null; // set default properties value

        @if ($property == "content") {
            @error "The CSS property content can not be used as an util";
        }

        @if ($type == list) {
            @each $value in $util {
                @if (type-of($value) != string) {
                    @error "Simple util values must be a string";
                }

                $name: $value;
                @include build-util-item(
                    $name: $name,
                    $property: $property,
                    $value: $value,
                    $build-mq: $build-mq
                );
            }
        } @else if (type-of($util) == map) {
            $map-values: if(
                map-has-key($util, "values"),
                map-get($util, "values"),
                $util
            );

            $options: if(
                map-has-key($util, "options"),
                map-get($util, "options"),
                "auto"
            );

            $properties: if(
                map-has-key($util, "properties"),
                map-get($util, "properties"),
                null
            );

            @if (type-of($map-values) == map) {
                @each $custom-name, $value in $map-values {
                    @include build-util-item(
                        $name: $custom-name,
                        $property: $property,
                        $value: $value,
                        $options: $options,
                        $properties: $properties,
                        $build-mq: $build-mq
                    );
                }
            } @else {
                @each $value in $map-values {
                    $custom-name: $value;
                    @include build-util-item(
                        $name: $custom-name,
                        $property: $property,
                        $value: $value,
                        $options: $options,
                        $properties: $properties,
                        $build-mq: $build-mq
                    );
                }
            }
        } @else {
            @include build-util-item(
                $name: $name,
                $property: $property,
                $value: $value,
                $build-mq: $build-mq
            );
        }
    }
}

/// Build-util is the wrapper for each of it's tasks
/// @require {Mixin} build-util-helper - if checker
/// @require {Mixin} build-util-mq-item - from mq-helper
/// @param {Map} $utilities - map to loop trough for util styles
/// @return {*} - new util classes
@mixin build-util($utilities: $config-utilkit) {
    @include build-util-helper($utilities);

    @include loop-mq($use-xs: false, $map: $config-util-breakpoints) {
        @include build-util-helper($utilities, $build-mq: true);
    }
}
